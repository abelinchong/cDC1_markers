## loading packages
library("dplyr")
library("data.table")
library("edgeR")
library("org.Mm.eg.db")
library("ggplot2")
library("fgsea")
library("GO.db")
library("gage")
#library("gageData")
library("ggpubr")
library("ComplexHeatmap")

## paths
projectPath <- here::here()
dataPath <- here::here("data")
metadataPath <- here::here("metadata")
sourceCode <- here::here("src")
plotsPath <- here::here("plots")
reportsPath <- here::here("reports")


```

```{r}
## GSE122108
rawCountsGSE122108 <- data.table::fread(
  file.path(dataPath, "GSE122108_Gene_count_table_GENCODE_vM25.csv.gz")
)%>% as.data.frame()
geneSymbol <- rawCountsGSE122108[[1]]
rownames(rawCountsGSE122108) <- toupper(geneSymbol)
samplesMetadataGSE122108 <- data.table::fread(
  file = file.path(metadataPath, "GSE122108_SraRunTable.txt")
)
colnames(samplesMetadataGSE122108) <- tolower(
  gsub(pattern = " ", replacement = "_", x = colnames(samplesMetadataGSE122108))
)


```

```{r}

#build samples metadata
vec <- readLines(file.path(metadataPath, "series_samples_mod.txt"))
dfIDs <- data.frame(
  ID = strsplit(x = vec[1], split = ",")[[1]],
  Name = strsplit(x = vec[2], split = ", ")[[1]] %>% 
    gsub(pattern = "_RNA-seq ", replacement = "", x = .) %>% 
    gsub(pattern = " ", replacement = "", x = .)
)
dfIDs <- dfIDs[-1, ]
namesGSE109125 <- dfIDs[dfIDs$Name %in% colnames(rawCountsGSE109125), ]
namesGSE122108 <- dfIDs[dfIDs$Name %in% colnames(rawCountsGSE122108), ]



#otra forma porque aquí nos quita muestras no se por que:
"""samplesMetadata2<- rbind(
  samplesMetadataGSE122108[samplesMetadataGSE122108$`geo_accession_(exp)` %in% 
                             namesGSE122108$ID, ], 
  fill = TRUE
)
"""
samplesMetadata2<- merge(
  samplesMetadataGSE122108, dfIDs, by.x = "geo_accession_(exp)", by.y = "ID"
)
samplesMetadata2$Groups <- gsub(
  pattern = "#\\d|\\.\\d$", replacement = "", x = samplesMetadata2$Name, perl = TRUE
)
samplesMetadata2$TissueDef <- ifelse(
  test = is.na(samplesMetadata2$tissue), 
  yes = samplesMetadata2$source_name, 
  no = samplesMetadata2$tissue
)

#asignar los genes al database.

gtfMouse <- rtracklayer::readGFF(
  file.path(metadataPath, "gencode.vM25.annotation.gtf.gz")
)
gtfMouse$gene_name <- toupper(gtfMouse$gene_name)
entrez <- read.table(file.path(metadataPath, "gencode.vM25.metadata.EntrezGene"))

colnames(entrez) <- c("transcript_id", "entrez_id")
gtfMouse <- merge(
  x = gtfMouse, y = entrez, by.x = "transcript_id", by.y = "transcript_id"
)

gtfMouse2<- gtfMouse[gtfMouse$gene_name %in% rownames(rawCountsGSE122108), ]
gtfMouse2<- gtfMouse2[!duplicated(gtfMouse$gene_name), ]
rownames(gtfMouse2) <- gtfMouse2$gene_name
## remove unmatched genes
rawCounts2<- rawCountsGSE122108[gtfMouse2$gene_name, ]
rawCounts2<-na.omit(rawCounts2)
rawCounts2 <- rawCounts2[-1]
genesMetadata <- gtfMouse[rownames(rawCounts2), ]
rawCounts2F<-rawCounts2[rowSums(rawCounts2)>1,]

#aqui poner codigo para la distribución y la frecuencia de expresión de rawcounts sin normalizar 


```

```{r}

#filtrarporexpresion
keep.exprs2F <- filterByExpr(rawCounts2F, group = samplesMetadata2$Groups)

rawCounts2F<- rawCounts2F[keep.exprs2F, ]
DGEData2F<- DGEList(counts = rawCounts2F, group = colnames(rawCounts2F))
DGEData2F <- calcNormFactors(DGEData2F, method = "TMM")
lcpmTMM2<- cpm(DGEData2F, log = TRUE)
cpmTMM2<- cpm(DGEData2F, log = FALSE)

genesMetadata2 <- genesMetadata[rownames(lcpmTMM2), ]



df_transposed2 <- as.data.frame(t(lcpmTMM2))
#rawCounts2F<-rawCounts2F[,colnames(rawCounts2F) %in% samplesMetadata2$Name]
df_transposed2$Groups<-samplesMetadata2$Groups

media_por_grupo2<- aggregate(. ~ Groups, data = df_transposed2, FUN = mean)


media_por_grupo2<-t(media_por_grupo2)
colnames(media_por_grupo2)<-media_por_grupo2[1,]
media_por_grupo2<-media_por_grupo2[-1,]

#una vez tengo las medias por grupo, seleccionar aquellos genes del surfeoma.


combined_surfeome_genes <- read.table(file =  file.path(
      dataPath, paste("combined_surfeome_genes.txt", sep = ".")))
combined_surfeome_genes <- as.character(combined_surfeome_genes$V1)


combined_surfeome_genes <- lapply(combined_surfeome_genes, toupper)
media_por_grupo2_surfeome<- media_por_grupo2[rownames(media_por_grupo2) %in% combined_surfeome_genes,]


#Ya que tengo los datos filtrados por grupos y por expresión de marcadores de superficie, hacer el análisis de DEG.
media_por_grupo2_surfeome_n<- apply(media_por_grupo2_surfeome, 2, as.numeric)
rownames(media_por_grupo2_surfeome_n)<-rownames(media_por_grupo2_surfeome)

media_por_grupo2_surfeome_n<-as.data.frame(media_por_grupo2_surfeome_n)


genes_128<-rownames(media_por_grupo2_surfeome)
genes_125<-rownames(lcpmTMM_surface_mean)

install.packages("VennDiagram")
library(VennDiagram)

y<-venn.diagram(
  x = list(genes_128, genes_125),  # Las listas a comparar
  category.names = c("Lista 128", "Lista 125"),   # Nombres de las categorías
  filename = "venn3.png",
  imagetype = "png",            # Tipo de imagen
  height = 2000,                 # Altura en pixeles
  width = 2000,                  # Ancho en pixeles
  resolution = 300,              # Resolución en dpi
  compression = "lzw",
  output=TRUE# No guarda el archivo, solo lo muestr                
)

#para saber que genes estan en cada lista y se diferencian entre sí.
setdiff



#hacer histograma


# Graficar la densidad de todas las columnas numéricas
plot(density(media_por_grupo2_surfeome_n[, 1]), 
     main = "Distribución de densidad de los genes todas poblaciones", 
     xlab = "Valores", 
     ylim = c(0, 0.5), 
     col = "steelblue", 
     lwd = 2)  # Graficar la primera columna

# Añadir más densidades
for (i in 2:ncol(media_por_grupo2_surfeome_n)) {
  lines(density(media_por_grupo2_surfeome_n[, i]), col = i, lwd = 2)  # Añadir una línea por cada columna
}


p <- plot(density(media_por_grupo2_surfeome_n[,"migDC"]), 
          main = paste("Distribución de densidad de los genes todas poblaciones"), 
          xlab = "Valores",
          ylim = c(0, 0.5),
          col = "steelblue", 
          lwd = 2)

#se ve que aquellos que tienen más de 5 de log fold habría que representarlos


#hacemos un nuevo dataframe con la media de lcpm de las 4 poblaciones de dendríticas activadas, esto nos permite aplicar la fórmula de cuales de los genes del surfemoma son los más altos en esta nueva "población ficticia".


media_migDC <- rowMeans(media_por_grupo2_surfeome_n[, c("DC.8an103p11bn.MLN",
                                                        "DC.8an103p.MLN",
                                                        "DC.mig.103p.LuLN",
                                                        "DC.mig.11bp.LuLN")], na.rm = TRUE)

media_migDC <- unname(media_migDC)
media_por_grupo2_surfeome_n$migDC<-media_migDC



media_por_grupo2_surfeome_n_migDC <- media_por_grupo2_surfeome_n[
  apply(media_por_grupo2_surfeome_n, 1, function(x) which.max(x) == which(colnames(media_por_grupo2_surfeome_n) == "migDC")),
  , drop = FALSE
]

#resultado no ok, no hay ningún gen que esté más expresado en esta población (puede ser que el filtro no nos valga al haber muchas poblaciones, hay que aplicar otro, por ejemplo seleccionar aquellos genes que estén dentro del 10% más expresados en esta columna)

umbral_filas <- apply(media_por_grupo2_surfeome_n, 1, function(fila) quantile(fila, 0.98))
media_por_grupo2_surfeome_n_migDC<-media_por_grupo2_surfeome_n[media_por_grupo2_surfeome_n$migDC>= umbral_filas, ]
media_por_grupo2_surfeome_n_migDC<-na.omit(media_por_grupo2_surfeome_n_migDC)




#ahora queremos anotar en el heatmap por clusters las diferentes poblaciones de Dendríticas y otras poblaciones inmunes para hacerlo más visual.
 

# Supongamos que tienes una matriz de datos llamada 'data_matrix'

asignar_factor <- function(poblacion) {
  if (grepl("^MF", poblacion)) {
    return("MF")
  } else if (grepl("^Mo", poblacion)) {
    return("Mo")
  } else if (grepl("^DC", poblacion)) {
    return("DC")
  } else if (poblacion == "migDC") {
    return("migDC")
  } else {
    return("Otros")  # Para los que no encajan
  }
}

# Aplicar la función para asignar factores
factores <- sapply(colnames(media_por_grupo2_surfeome_n_migDC), asignar_factor)
media_por_grupo2_surfeome_n2<-media_por_grupo2_surfeome_n_migDC
colnames(media_por_grupo2_surfeome_n2)<-factores 


Expr_genes2<-rownames(media_por_grupo2_surfeome_n_migDC)[media_por_grupo2_surfeome_n_migDC[, "migDC"] >7.5]
media_por_grupo2_surfeome_n_migDC_7_5<-media_por_grupo2_surfeome_n[Expr_genes2,]
pdf(file = paste(reportsPath, "Heatmap_GSE128_migDC_10perctop.pdf", sep = "/"))

factor_df <- data.frame(Factor = factores)

top_annotation <- HeatmapAnnotation(
  df = factor_df,  # Los factores asignados a las columnas
  col = list(Factor = c("MF" = "blue", "Mo" = "green", "DC" = "red", 
                        "migDC" = "purple", "Otros" = "grey") ),  # Colores para cada grupo
  annotation_name_side = "left",  # El nombre de la anotación se pone en el lado izquierdo
  show_legend = TRUE  # Mostrar leyenda de colores
)

p<-ComplexHeatmap::Heatmap(
  as.matrix(media_por_grupo2_surfeome_n_migDC), 
  show_column_names = TRUE,
  show_row_names = TRUE,
  row_names_gp = gpar(fontsize = 4),
  column_names_gp = gpar(fontsize = 2, just = "centre"),
  column_title_gp = gpar(fontface = "bold"),
  name="levels",
  column_title = "TM DEG in migDC_7_5",
  column_names_rot = -90,
  border = FALSE,
  cluster_columns = TRUE, 
  show_row_dend = TRUE,
  heatmap_width = unit(100, "mm"),
  heatmap_height = unit(100, "mm"),
  use_raster = FALSE,
  top_annotation = top_annotation
  )

dev.off()


#ahora vamos a hacer lo mismo pero tratando con cDC1:
umbral_filas2 <- apply(media_por_grupo2_surfeome_n, 1, function(fila) quantile(fila, 0.90))
media_por_grupo2_surfeome_n_XCR1<-media_por_grupo2_surfeome_n[media_por_grupo2_surfeome_n$DC.24p8apXCR1p.Sp>= umbral_filas, ]
media_por_grupo2_surfeome_n_XCR1<-na.omit(media_por_grupo2_surfeome_n_XCR1)

Expr_genes2<-rownames(media_por_grupo2_surfeome_n_XCR1)[media_por_grupo2_surfeome_n_XCR1[,"DC.24p8apXCR1p.Sp"] >5]

media_por_grupo2_surfeome_n_XCR1_5<-media_por_grupo2_surfeome_n_XCR1[Expr_genes2,]




pdf(file = paste(reportsPath, "Heatmap_GSE128_XCR1_10perctop_5.pdf", sep = "/"))
ComplexHeatmap::Heatmap(
  media_por_grupo2_surfeome_n_XCR1_5, 
  show_column_names = TRUE,
  show_row_names = TRUE,
  row_names_gp = gpar(fontsize = 4),
  column_names_gp = gpar(fontsize = 2, just = "centre"),
  column_title_gp = gpar(fontface = "bold"),
  name="levels",
  column_title = "TM DEG in cells_XCR1spmax",
  column_names_rot = -90,
  border = FALSE,
  cluster_columns = TRUE, 
  show_row_dend = TRUE,
  heatmap_width = unit(100, "mm"),
  heatmap_height = unit(100, "mm"),
  use_raster = FALSE,
  top_annotation = top_annotation
  )

dev.off()

#aqui anotamos los nombres de genes que usamos para hacer el heatmap en el otro dataset
genes_migDC_128<-rownames(media_por_grupo2_surfeome_n_migDC)
genes_xcr1_128<-rownames(media_por_grupo2_surfeome_n_XCR1)



#EN ESTA PARTE HACEMOS UN PCA:
PCAall <- prcomp(t(media_por_grupo2_surfeome_n), center = TRUE, scale. = TRUE)

variance <- round(factoextra::get_eigenvalue(PCAall)[c(1, 2), 2], 1)
p <- ggplot(data.frame(PCAall[["x"]]), aes(x = PC1, y = PC2)) +
  geom_point(
    aes(fill = colnames(media_por_grupo2_surfeome_n)), 
    pch = 21, size = 10, color = "black") +
  scale_color_gradientn(colors = c("blue", "green", "yellow", "red")) +
  xlab(paste0("PC1 (", variance[1], "%)")) + 
  ylab(paste0("PC2 (", variance[2], "%)")) + 
  geom_vline(xintercept = 0, size = 0.4, linetype = "dashed") + 
  geom_hline(yintercept = 0, size = 0.4, linetype = "dashed")  + 
  guides(fill = guide_legend(override.aes = list(shape = 21))) +
  theme_minimal() + 
  theme(
    plot.title = element_text(face = "bold", hjust = 0, size = 12),
    legend.title = element_text(face = "bold", hjust = 0.5, size = 11),
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    text = element_text(family = "Helvetica"), 
    aspect.ratio = 1
  ) + scale_x_continuous() + 
  scale_y_continuous() + 
  ggtitle("PCA human macrophages")
p



PCAall <- prcomp(t(media_por_grupo2_surfeome_n), center = TRUE, scale. = TRUE)
pca_data <- as.data.frame(PCAall$x)

p<-ggplot(pca_data, aes(x = PC1, y = PC2, shape = colnames(media_por_grupo2_surfeome_n))) + 
  geom_point(size = 3) + 
  scale_color_gradientn(colors = c("blue", "green", "yellow", "red"))+  # Asignar diferentes formas
  xlab(paste0("PC1 (", round(summary(PCAall)$importance[2,1]*100, 2), "%)")) + 
  ylab(paste0("PC2 (", round(summary(PCAall)$importance[2,2]*100, 2), "%)")) + 
  ggtitle("Gráfico de PCA - 175 Muestras") +
  theme_minimal() + 
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12)
  )
ggsave("pca.png",plot = p)
